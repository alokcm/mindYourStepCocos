{"version":3,"sources":["file:///Users/cocos/MindYourStep/assets/Scripts/PlayerController.ts"],"names":["_decorator","Component","Vec3","systemEvent","SystemEvent","ccclass","property","PlayerController","start","on","EventType","MOUSE_UP","onMouseUp","event","getButton","jumpByStep","step","_isMoving","_startJump","_jumpStep","_curJumpTime","_curJumpSpeed","_jumpTime","node","getPosition","_curPos","add","_targetPos","onOnceJumpEnd","update","deltaTime","setPosition","_deltaPos","x"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,W,OAAAA,W;;;;;;;OAC7C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;kCAGjBO,gB,WADZF,OAAO,CAAC,kBAAD,C,yBAAR,MACaE,gBADb,SACsCN,SADtC,CACgD;AAAA;AAAA;;AAAA,8CASd,KATc;;AAAA,6CAUhB,CAVgB;;AAAA,gDAWb,CAXa;;AAAA,6CAYhB,GAZgB;;AAAA,iDAaZ,CAbY;;AAAA,2CAcpB,IAAIC,IAAJ,EAdoB;;AAAA,6CAelB,IAAIA,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAfkB;;AAAA,8CAgBjB,IAAIA,IAAJ,EAhBiB;;AAAA,6CAiBxB,KAjBwB;AAAA;;AAmB5CM,QAAAA,KAAK,GAAI;AACL;AACAL,UAAAA,WAAW,CAACM,EAAZ,CAAeL,WAAW,CAACM,SAAZ,CAAsBC,QAArC,EAA+C,KAAKC,SAApD,EAA+D,IAA/D;AACH;;AAEDA,QAAAA,SAAS,CAACC,KAAD,EAAoB;AACzB,cAAIA,KAAK,CAACC,SAAN,OAAsB,CAA1B,EAA6B;AACzB,iBAAKC,UAAL,CAAgB,CAAhB;AACH,WAFD,MAEO,IAAIF,KAAK,CAACC,SAAN,OAAsB,CAA1B,EAA6B;AAChC,iBAAKC,UAAL,CAAgB,CAAhB;AACH;AAEJ;;AAEDA,QAAAA,UAAU,CAACC,IAAD,EAAe;AACrB,cAAI,KAAKC,SAAT,EAAoB;AAChB;AACH;;AACD,eAAKC,UAAL,GAAkB,IAAlB;AACA,eAAKC,SAAL,GAAiBH,IAAjB;AACA,eAAKI,YAAL,GAAoB,CAApB;AACA,eAAKC,aAAL,GAAqB,KAAKF,SAAL,GAAiB,KAAKG,SAA3C;AACA,eAAKC,IAAL,CAAUC,WAAV,CAAsB,KAAKC,OAA3B;AACAvB,UAAAA,IAAI,CAACwB,GAAL,CAAS,KAAKC,UAAd,EAA0B,KAAKF,OAA/B,EAAwC,IAAIvB,IAAJ,CAAS,KAAKiB,SAAd,EAAyB,CAAzB,EAA4B,CAA5B,CAAxC;AAEA,eAAKF,SAAL,GAAiB,IAAjB;AACH;;AAEDW,QAAAA,aAAa,GAAG;AACZ,eAAKX,SAAL,GAAiB,KAAjB;AACH;;AAEDY,QAAAA,MAAM,CAAEC,SAAF,EAAqB;AACvB,cAAI,KAAKZ,UAAT,EAAqB;AACjB,iBAAKE,YAAL,IAAqBU,SAArB;;AACA,gBAAI,KAAKV,YAAL,GAAoB,KAAKE,SAA7B,EAAwC;AACpC;AACA,mBAAKC,IAAL,CAAUQ,WAAV,CAAsB,KAAKJ,UAA3B;AACA,mBAAKT,UAAL,GAAkB,KAAlB;AACA,mBAAKU,aAAL;AACH,aALD,MAKO;AACH;AACA,mBAAKL,IAAL,CAAUC,WAAV,CAAsB,KAAKC,OAA3B;AACA,mBAAKO,SAAL,CAAeC,CAAf,GAAmB,KAAKZ,aAAL,GAAqBS,SAAxC;AACA5B,cAAAA,IAAI,CAACwB,GAAL,CAAS,KAAKD,OAAd,EAAuB,KAAKA,OAA5B,EAAqC,KAAKO,SAA1C;AACA,mBAAKT,IAAL,CAAUQ,WAAV,CAAsB,KAAKN,OAA3B;AACH;AACJ;AACJ;;AAnE2C,O","sourcesContent":["import { _decorator, Component, Vec3, systemEvent, SystemEvent, EventMouse, Animation } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"PlayerController\")\nexport class PlayerController extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n\n    // for fake tween\n    private _startJump: boolean = false;\n    private _jumpStep: number = 0;\n    private _curJumpTime: number = 0;\n    private _jumpTime: number = 0.1;\n    private _curJumpSpeed: number = 0;\n    private _curPos: Vec3 = new Vec3();\n    private _deltaPos: Vec3 = new Vec3(0, 0, 0);\n    private _targetPos: Vec3 = new Vec3();\n    private _isMoving = false;\n\n    start () {\n        // Your initialization goes here.\n        systemEvent.on(SystemEvent.EventType.MOUSE_UP, this.onMouseUp, this);\n    }\n\n    onMouseUp(event: EventMouse) {\n        if (event.getButton() === 0) {\n            this.jumpByStep(1);\n        } else if (event.getButton() === 2) {\n            this.jumpByStep(2);\n        }\n\n    }\n\n    jumpByStep(step: number) {\n        if (this._isMoving) {\n            return;\n        }\n        this._startJump = true;\n        this._jumpStep = step;\n        this._curJumpTime = 0;\n        this._curJumpSpeed = this._jumpStep / this._jumpTime;\n        this.node.getPosition(this._curPos);\n        Vec3.add(this._targetPos, this._curPos, new Vec3(this._jumpStep, 0, 0));\n\n        this._isMoving = true;\n    }\n\n    onOnceJumpEnd() {\n        this._isMoving = false;\n    }\n\n    update (deltaTime: number) {\n        if (this._startJump) {\n            this._curJumpTime += deltaTime;\n            if (this._curJumpTime > this._jumpTime) {\n                // end\n                this.node.setPosition(this._targetPos);\n                this._startJump = false;\n                this.onOnceJumpEnd();\n            } else {\n                // tween\n                this.node.getPosition(this._curPos);\n                this._deltaPos.x = this._curJumpSpeed * deltaTime;\n                Vec3.add(this._curPos, this._curPos, this._deltaPos);\n                this.node.setPosition(this._curPos);\n            }\n        }\n    }\n}"]}